import streamlit as st  # Importa la librer√≠a Streamlit y la referencia como 'st' para construir la UI web.

st.set_page_config(page_title="Alarma", page_icon="üö®")  # Configura la p√°gina: t√≠tulo del navegador e √≠cono. Debe ir antes de dibujar la UI.
st.title("üö® Sensor con rango")  # Muestra un encabezado grande en la app.

class Sensor:  # Declara una clase que modela un sensor con l√≠mites m√≠nimo y m√°ximo (POO).
    def __init__(self, nombre, unidad):     # Constructor: recibe el nombre del sensor y su unidad de medida.
        self.nombre = nombre                # Guarda el nombre (ej.: "Temperatura" o "Vibraci√≥n").
        self.unidad = unidad                # Guarda la unidad (ej.: "¬∞C" o "mm/s").
        self.min_v = 0                      # Inicializa el umbral m√≠nimo en 0 (valor por defecto).
        self.max_v = 0                      # Inicializa el umbral m√°ximo en 0 (valor por defecto).
    def set_rango(self, minimo, maximo):    # M√©todo para definir/actualizar los l√≠mites permitidos del sensor.
        self.min_v = minimo                 # Asigna el nuevo l√≠mite m√≠nimo.
        self.max_v = maximo                 # Asigna el nuevo l√≠mite m√°ximo.
    def estado(self, valor):                # M√©todo que eval√∫a una lectura y devuelve un estado textual.
        # Expresi√≥n condicional: si valor < min ‚Üí "bajo"; si valor > max ‚Üí "alto"; en otro caso ‚Üí "ok".
        return "bajo" if valor < self.min_v else ("alto" if valor > self.max_v else "ok")

# Crea un selector tipo radio para elegir el tipo de sensor; el resultado es una cadena del √≠tem elegido.
tipo = st.radio("Tipo", ["Temperatura (¬∞C)", "Vibraci√≥n (mm/s)"], horizontal=True)

unidad, low, high, dmin, dmax, dval = (("¬∞C", 0, 120, 20, 60, 55) if "Temp" in tipo else ("mm/s", 0, 50, 2, 10, 12))  # Selecciona presets seg√∫n la opci√≥n elegida:
s = Sensor(tipo.split()[0], unidad)  # Crea el objeto Sensor; split()[0] toma solo la palabra "Temperatura" o "Vibraci√≥n".
mn = st.number_input("M√≠nimo", low, high, dmin)  # Input num√©rico para el umbral m√≠nimo; acotado entre 'low' y 'high'.
mx = st.number_input("M√°ximo", mn,  high, dmax)  # Input num√©rico para el umbral m√°ximo; su m√≠nimo permitido es 'mn' (garantiza max ‚â• min).
val = st.slider("Lectura", low, high, dval)      # Slider para la lectura actual del sensor; tambi√©n acotado entre 'low' y 'high'.
s.set_rango(mn, mx)  # Actualiza en el objeto los l√≠mites elegidos por el usuario.

e = s.estado(val)    # Calcula el estado de la lectura: "bajo", "ok" o "alto" seg√∫n el rango definido.
if   e == "ok":
    st.success(f"‚úÖ {tipo} dentro del intervalo operativo: {val}{unidad}") # Mensaje verde si el valor est√° dentro del intervalo; se muestra el valor y la unidad.
elif e == "bajo":
    st.warning(f" ‚ñº {tipo} por debajo del m√≠nimo operativo: {val}{unidad}") # Mensaje amarillo si el valor est√° por debajo del m√≠nimo.
else:
    st.error  (f"üî∫ {tipo} por encima del m√°ximo operativo: {val}{unidad}") # Mensaje rojo si el valor est√° por encima del m√°ximo.